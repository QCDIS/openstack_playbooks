- hosts: localhost
  vars:
    - auth_data: {
       'auth_url': "{{ ansible_env.OS_AUTH_URL }}",
       'os_access_token': "{{ ansible_env.OS_ACCESS_TOKEN }}",
       'os_project_id': "{{ ansible_env.OS_PROJECT_ID }}",
       'os_auth_type': "{{ ansible_env.OS_AUTH_TYPE }}",
       'os_identity_provider': "{{ ansible_env.OS_IDENTITY_PROVIDER}}",
       'os_protocol': "{{ ansible_env.OS_PROTOCOL}}"
      }
      ansible_python_interpreter: /usr/bin/python3

  tasks:
    - set_fact:
        refresh_token_exists: true
      when: "'auth_keys' in hostvars.localhost.credentials[0] and 'refresh_token' in hostvars.localhost.credentials[0]['auth_keys']"

    - find:
        paths: /tmp/
        patterns: "refresh_token_response_{{hostvars['localhost']['credentials'][0]['user']}}.json"
        age: 1h
      register: older_files

    - file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ older_files.files }}"

    - stat:
        path: /tmp/refresh_token_response_{{hostvars['localhost']['credentials'][0]['user']}}.json
      register: stat_result

    - include_vars:
        file: /tmp/refresh_token_response_{{hostvars['localhost']['credentials'][0]['user']}}.json
        name: refresh_token_cache
      when: stat_result.stat.exists

    - uri:
        url: "{{hostvars['localhost']['credentials'][0]['auth_url']}}"
        user: "{{hostvars['localhost']['credentials'][0]['user']}}"
        password: "{{hostvars['localhost']['credentials'][0]['token']}}"
        method: POST
        body: "client_id={{hostvars['localhost']['credentials'][0]['user']}}&client_secret={{hostvars['localhost']['credentials'][0]['token']}}&grant_type={{hostvars['localhost']['credentials'][0]['token_type']}}&refresh_token={{hostvars['localhost']['credentials'][0]['auth_keys']['refresh_token']}}&scope=openid%20email%20profile"
        force_basic_auth: yes
        status_code: 200
        body_format: raw
      register: refresh_token_response
      when: "'stat' in stat_result and refresh_token is defined"

    - local_action: copy content={{ refresh_token_response }} dest=/tmp/refresh_token_response_{{hostvars['localhost']['credentials'][0]['user']}}.json
      when: "'stat' in stat_result and refresh_token is defined"

    - shell: jq -r '.json.access_token' /tmp/refresh_token_response_{{hostvars['localhost']['credentials'][0]['user']}}.json
      register: access_token
      when: "refresh_token is defined"


    - openstack.cloud.auth:
        auth_type: "password"
        auth:
          auth_type: "password"
          username: "{{ hostvars['localhost']['credentials'][0]['user'] }}"
          project_id: "{{ hostvars['localhost']['credentials'][0]['extra_properties']['project_id'] }}"
          auth_url: "{{ hostvars['localhost']['credentials'][0]['auth_url'] }}"
          password: "{{hostvars['localhost']['credentials'][0]['token']}}"
          project_name: "Lab"
          user_domain_name: "Default"
          region_name: "RegionOne"
          interface: "public"
          identity_api_version: 3

    - set_stats:
        data:
          access_token: "{{ access_token.stdout }}"
      register: refresh_token_stats
      when: "refresh_token is defined"

#    - debug:
#        var: refresh_token_stats
